import{_ as s,N as e,S as t,U as n,a0 as a,Z as c}from"./framework-b23b3642.js";const o="/damone-blog/images/data-structure/20200317151355505.png",p={},i=o+"#pic_center",l=n("h1",{id:"_2-1-栈",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-1-栈","aria-hidden":"true"},"#"),a(" 2.1 栈")],-1),d=n("h2",{id:"_2-1-1-栈的定义",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-1-1-栈的定义","aria-hidden":"true"},"#"),a(" 2.1.1 栈的定义")],-1),u=n("p",null,[n("code",null,"栈"),a("是线性表结构的一种，但是栈结构的插入与删除操作都只能从同一端进行，所以栈结构是一种受限制的线性表结构，数据的插入与删除符合LIFO的原则（也就是"),n("code",null,"后进先出"),a("，"),n("code",null,"先进后出"),a("）。")],-1),r=n("figure",null,[n("img",{src:i,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),k=c(`<h2 id="_2-1-2-栈的基本操作" tabindex="-1"><a class="header-anchor" href="#_2-1-2-栈的基本操作" aria-hidden="true">#</a> 2.1.2 栈的基本操作</h2><p><code>注</code>：参数代“&amp;”表示：方法运行完后，对参数修改的结果要<code>“带回来”</code></p><p>对数据的操作：创销，增删查改</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">InitStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//初始化表：构造一个空的栈S，分配内存空间</span>
<span class="token function">DestoryStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//销毁操作：销毁栈，并释放栈S所占用的内存空间</span>

<span class="token function">Push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>S<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//进栈，若栈S未满，则将x加入使之成为新栈</span>
<span class="token function">Pop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>S<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//出栈，若栈S非空，则弹出栈顶元素，并用x返回</span>

<span class="token function">GetTop</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//读栈顶元素，若栈S非空，则将x返回栈顶元素</span>

<span class="token comment">//其它常用操作</span>
<span class="token function">StackEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//判空操作</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-1-3-存储结构" tabindex="-1"><a class="header-anchor" href="#_2-1-3-存储结构" aria-hidden="true">#</a> 2.1.3 存储结构</h2><p><code>顺序存储</code>和<code>链式存储</code></p><h2 id="_2-1-4-栈分类" tabindex="-1"><a class="header-anchor" href="#_2-1-4-栈分类" aria-hidden="true">#</a> 2.1.4 栈分类</h2><p>栈的顺序存储：顺序栈</p><p>栈的链式存储：链栈</p>`,9),m=[l,d,u,r,k];function _(h,v){return e(),t("div",null,m)}const b=s(p,[["render",_],["__file","2.1栈.html.vue"]]);export{b as default};
