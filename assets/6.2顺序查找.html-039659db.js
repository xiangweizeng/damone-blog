const n=JSON.parse(`{"key":"v-4c3eb490","path":"/computer-science/data-structure/06-%E6%9F%A5%E6%89%BE/6.2%E9%A1%BA%E5%BA%8F%E6%9F%A5%E6%89%BE.html","title":"6.2 顺序查找","lang":"zh-CN","frontmatter":{"description":"6.2 顺序查找 6.2.1 顺序查找的定义 顺序查找，又叫线性查找。 6.2.2 顺序查找的实现 算法思想：从头挨个查找。 普通代码： //查找表的数据结构（动态分配的顺序表） typedef struct{ ElemType *elem; //指向“动态”分配的数组的指针 int TableLen; //查找表的当前长度 }SSTable; //顺序查找 int Search_Seq(SSTable ST, ElemType key){ int i; for(i=0; i&lt;ST.TableLen &amp;&amp; ST.elem[i]!=key; ++i){//从前往后找，判断是否越界 return i==ST.TableLen? -1 : i; //查找成功，则返回元素下标；查找失败，则返回-1 } }","head":[["meta",{"property":"og:url","content":"https://github.com/xiangweizeng/damone-blog/computer-science/data-structure/06-%E6%9F%A5%E6%89%BE/6.2%E9%A1%BA%E5%BA%8F%E6%9F%A5%E6%89%BE.html"}],["meta",{"property":"og:site_name","content":"Damone's Blog"}],["meta",{"property":"og:title","content":"6.2 顺序查找"}],["meta",{"property":"og:description","content":"6.2 顺序查找 6.2.1 顺序查找的定义 顺序查找，又叫线性查找。 6.2.2 顺序查找的实现 算法思想：从头挨个查找。 普通代码： //查找表的数据结构（动态分配的顺序表） typedef struct{ ElemType *elem; //指向“动态”分配的数组的指针 int TableLen; //查找表的当前长度 }SSTable; //顺序查找 int Search_Seq(SSTable ST, ElemType key){ int i; for(i=0; i&lt;ST.TableLen &amp;&amp; ST.elem[i]!=key; ++i){//从前往后找，判断是否越界 return i==ST.TableLen? -1 : i; //查找成功，则返回元素下标；查找失败，则返回-1 } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-23T09:58:46.000Z"}],["meta",{"property":"article:author","content":"damone"}],["meta",{"property":"article:modified_time","content":"2023-04-23T09:58:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"6.2 顺序查找\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-23T09:58:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"damone\\",\\"url\\":\\"https://github.com/xiangweizeng\\"}]}"]]},"headers":[{"level":2,"title":"6.2.1 顺序查找的定义","slug":"_6-2-1-顺序查找的定义","link":"#_6-2-1-顺序查找的定义","children":[]},{"level":2,"title":"6.2.2 顺序查找的实现","slug":"_6-2-2-顺序查找的实现","link":"#_6-2-2-顺序查找的实现","children":[]},{"level":2,"title":"6.2.3 查找效率分析","slug":"_6-2-3-查找效率分析","link":"#_6-2-3-查找效率分析","children":[]},{"level":2,"title":"6.2.4 顺序查找的优化","slug":"_6-2-4-顺序查找的优化","link":"#_6-2-4-顺序查找的优化","children":[]}],"git":{"createdTime":1682243926000,"updatedTime":1682243926000,"contributors":[{"name":"damone","email":"826127212@qq.com","commits":1}]},"readingTime":{"minutes":1.3,"words":391},"filePathRelative":"computer-science/data-structure/06-查找/6.2顺序查找.md","localizedDate":"2023年4月23日","excerpt":"<h1> 6.2 顺序查找</h1>\\n<h2> 6.2.1 顺序查找的定义</h2>\\n<p><code>顺序查找</code>，又叫<code>线性查找</code>。</p>\\n<h2> 6.2.2 顺序查找的实现</h2>\\n<p><code>算法思想</code>：从头挨个查找。</p>\\n<p>普通代码：</p>\\n<div class=\\"language-c line-numbers-mode\\" data-ext=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token comment\\">//查找表的数据结构（动态分配的顺序表）</span>\\n<span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span><span class=\\"token punctuation\\">{</span>\\n    ElemType <span class=\\"token operator\\">*</span>elem<span class=\\"token punctuation\\">;</span>      <span class=\\"token comment\\">//指向“动态”分配的数组的指针</span>\\n    <span class=\\"token keyword\\">int</span> TableLen<span class=\\"token punctuation\\">;</span>        <span class=\\"token comment\\">//查找表的当前长度</span>\\n<span class=\\"token punctuation\\">}</span>SSTable<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//顺序查找</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">Search_Seq</span><span class=\\"token punctuation\\">(</span>SSTable ST<span class=\\"token punctuation\\">,</span> ElemType key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> i<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span>i<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">&lt;</span>ST<span class=\\"token punctuation\\">.</span>TableLen <span class=\\"token operator\\">&amp;&amp;</span> ST<span class=\\"token punctuation\\">.</span>elem<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">!=</span>key<span class=\\"token punctuation\\">;</span> <span class=\\"token operator\\">++</span>i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span><span class=\\"token comment\\">//从前往后找，判断是否越界</span>\\n        <span class=\\"token keyword\\">return</span> i<span class=\\"token operator\\">==</span>ST<span class=\\"token punctuation\\">.</span>TableLen<span class=\\"token operator\\">?</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span> <span class=\\"token operator\\">:</span> i<span class=\\"token punctuation\\">;</span>   <span class=\\"token comment\\">//查找成功，则返回元素下标；查找失败，则返回-1</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
