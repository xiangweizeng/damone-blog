import{_ as n,N as a,S as s,Z as e}from"./framework-b23b3642.js";const t={},p=e(`<h1 id="_2-6-队列的顺序存储" tabindex="-1"><a class="header-anchor" href="#_2-6-队列的顺序存储" aria-hidden="true">#</a> 2.6 队列的顺序存储</h1><h2 id="_2-6-1-序队列的定义" tabindex="-1"><a class="header-anchor" href="#_2-6-1-序队列的定义" aria-hidden="true">#</a> 2.6.1 序队列的定义</h2><p><code>顺序队列</code>：队列的<code>顺序存储</code>。</p><h2 id="_2-6-2-顺序队列的实现方式" tabindex="-1"><a class="header-anchor" href="#_2-6-2-顺序队列的实现方式" aria-hidden="true">#</a> 2.6.2 顺序队列的实现方式</h2><p>实现方式：<code>静态分配</code>和<code>动态分配</code></p><p><code>注</code>：这两种方式：只是类型描述和初始化不一样，判空、入队、出队、取队头操作都一样</p><h2 id="_2-6-3-顺序队列上的操作" tabindex="-1"><a class="header-anchor" href="#_2-6-3-顺序队列上的操作" aria-hidden="true">#</a> 2.6.3 顺序队列上的操作</h2><p>以<code>循环队列</code>为主</p><h3 id="静态分配的顺序队列-类型描述和初始化" tabindex="-1"><a class="header-anchor" href="#静态分配的顺序队列-类型描述和初始化" aria-hidden="true">#</a> 静态分配的顺序队列：类型描述和初始化</h3><div class="language-C line-numbers-mode" data-ext="C"><pre class="language-C"><code>#define MaxSize 10
typedef struct{
	Elemtype data[MaxSize];//静态数组存放队列中元素
	Elemtype front,rear;        //队列顶指针
}SqQueue;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//初始化一个队列</span>
<span class="token keyword">void</span> <span class="token function">InitStack</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>
	Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> Q<span class="token punctuation">.</span>front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//初始化队列顶指针</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动态分配的顺序队列-类型描述和初始化" tabindex="-1"><a class="header-anchor" href="#动态分配的顺序队列-类型描述和初始化" aria-hidden="true">#</a> 动态分配的顺序队列：类型描述和初始化</h3><div class="language-C line-numbers-mode" data-ext="C"><pre class="language-C"><code>typedef struct{
	Elemtype *base;             //静态数组存放队列中元素
	Elemtype front,rear;        //队列顶指针
}SqQueue;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//初始化一个队列</span>
bool <span class="token function">InitQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>
	Q<span class="token punctuation">.</span>base<span class="token operator">=</span><span class="token punctuation">(</span>Elemtype <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>MAXQSIZE<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Elemtype<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span>Base<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>
	Q<span class="token punctuation">.</span>front <span class="token operator">=</span> Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="判队列空" tabindex="-1"><a class="header-anchor" href="#判队列空" aria-hidden="true">#</a> 判队列空</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//判空</span>
bool <span class="token function">StackEmpty</span><span class="token punctuation">(</span>SqStack S<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear <span class="token operator">==</span> Q<span class="token punctuation">.</span>front<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//队列已空</span>
        <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="入队-循环队列" tabindex="-1"><a class="header-anchor" href="#入队-循环队列" aria-hidden="true">#</a> 入队（循环队列）</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//入队</span>
bool <span class="token function">EnQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>Elemtype e<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MAXSIZE <span class="token operator">==</span> Q<span class="token punctuation">.</span>front<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>  <span class="token comment">//队列已满</span>
	Q<span class="token punctuation">.</span>data<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>				<span class="token comment">//e为队尾元素</span>
    Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MaxSize<span class="token punctuation">;</span>  <span class="token comment">//队尾指针后移</span>
	<span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="出队-循环队列" tabindex="-1"><a class="header-anchor" href="#出队-循环队列" aria-hidden="true">#</a> 出队（循环队列）</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//出队</span>
bool <span class="token function">DeQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>Elemtype <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear <span class="token operator">==</span> Q<span class="token punctuation">.</span>front<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>
	e <span class="token operator">=</span> Q<span class="token punctuation">.</span>data<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//e为队头元素</span>
    Q<span class="token punctuation">.</span>front<span class="token operator">=</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MAXQSIZE<span class="token punctuation">;</span>	<span class="token comment">//队头指针后移</span>
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取队头元素" tabindex="-1"><a class="header-anchor" href="#获取队头元素" aria-hidden="true">#</a> 获取队头元素</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//获取队头元素</span>
bool <span class="token function">GetHead</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>Elemtype <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear <span class="token operator">==</span> Q<span class="token punctuation">.</span>front<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>
	e <span class="token operator">=</span> Q<span class="token punctuation">.</span>data<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//e为队列顶元素</span>
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="队列已空-已满" tabindex="-1"><a class="header-anchor" href="#队列已空-已满" aria-hidden="true">#</a> 队列已空/已满</h3><p>方案一：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token number">10</span></span></span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>
	Elemtype data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//静态数组存放队列中元素</span>
	<span class="token keyword">int</span> front<span class="token punctuation">,</span>rear<span class="token punctuation">;</span>        <span class="token comment">//队列顶指针</span>
<span class="token punctuation">}</span>SqQueue<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>已空：Q.rear == Q.front 已满：(Q.rear+1)%MAXSIZE == Q.front</p><p>方案二：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token number">10</span></span></span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>
	Elemtype data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//静态数组存放队列中元素</span>
	<span class="token keyword">int</span> front<span class="token punctuation">,</span>rear<span class="token punctuation">;</span>        <span class="token comment">//队列顶指针</span>
    <span class="token keyword">int</span> size<span class="token punctuation">;</span>              <span class="token comment">//队列当前长度</span>
<span class="token punctuation">}</span>SqQueue<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>已空：size == 0 已满：size == MAXSIZE</p><p>方案三：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token number">10</span></span></span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>
	Elemtype data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//静态数组存放队列中元素</span>
	<span class="token keyword">int</span> front<span class="token punctuation">,</span>rear<span class="token punctuation">;</span>        <span class="token comment">//队列顶指针</span>
    <span class="token keyword">int</span> tag<span class="token punctuation">;</span>              <span class="token comment">//记录最近是删除还是插入，0是删除，1是插入</span>
<span class="token punctuation">}</span>SqQueue<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>已空：Q.rear == Q.front &amp;&amp; tag = 0 已满：Q.rear == Q.front &amp;&amp; tag = 1</p><h3 id="元素的个数" tabindex="-1"><a class="header-anchor" href="#元素的个数" aria-hidden="true">#</a> 元素的个数</h3><p>(Q.rear+MAXSIZE-Q.front)%MAXSIZE == Q.front</p>`,34),c=[p];function o(i,l){return a(),s("div",null,c)}const r=n(t,[["render",o],["__file","2.5队列的顺序存储.html.vue"]]);export{r as default};
