import{_ as n,N as l,S as e,Z as t,U as s,a0 as a}from"./framework-b23b3642.js";const c="/damone-blog/images/data-structure//805461-20160127214903223-1113949071.jpg",i={},m=t('<h1 id="_4-6-平衡二叉树" tabindex="-1"><a class="header-anchor" href="#_4-6-平衡二叉树" aria-hidden="true">#</a> 4.6 平衡二叉树</h1><h2 id="_4-6-1-平衡二叉树的定义" tabindex="-1"><a class="header-anchor" href="#_4-6-1-平衡二叉树的定义" aria-hidden="true">#</a> 4.6.1 平衡二叉树的定义</h2><p><code>平衡二叉树</code>,又被称为<code>AVL树</code>（有别于AVL算法），且具有以下性质：</p><p>它是一 棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p><p>AVL是两个人的名字，ASL是平均查找长度，不一样</p><p><code>结点的平衡因子=左子树高-右子树高</code></p><p>平衡二叉树结点的平衡因子的值只可能是-1、0、1。</p><figure><img src="'+c+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_4-6-2-平衡二叉树的存储结构-用链式存储" tabindex="-1"><a class="header-anchor" href="#_4-6-2-平衡二叉树的存储结构-用链式存储" aria-hidden="true">#</a> 4.6.2 平衡二叉树的存储结构（用链式存储）</h2><p>平衡二叉树的类型表述（与二叉树不一样）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">AVLNode</span><span class="token punctuation">{</span>
	<span class="token keyword">int</span> key<span class="token punctuation">;</span>      <span class="token comment">//数据域</span>
    <span class="token keyword">int</span> balance<span class="token punctuation">;</span>  <span class="token comment">//平衡因子</span>
	<span class="token keyword">struct</span> <span class="token class-name">AVLNode</span> <span class="token operator">*</span>lchide<span class="token punctuation">,</span> <span class="token operator">*</span>rchild<span class="token punctuation">;</span> <span class="token comment">//左、右孩子指针</span>
<span class="token punctuation">}</span>AVLNode<span class="token punctuation">,</span> <span class="token operator">*</span>AVLTree<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-6-3-平衡二叉树的插入" tabindex="-1"><a class="header-anchor" href="#_4-6-3-平衡二叉树的插入" aria-hidden="true">#</a> 4.6.3 平衡二叉树的插入</h2><p>在平衡的二叉排序树中插入一个结点导致不平衡，如何调整平衡？ 解决方法：调整<code>“最小不平衡树”</code></p><p>四种调整方法：</p><ul><li>①LL：在A的<code>左孩子的左子树</code>中插入导致A的不平衡，将A的<code>左孩子右上旋</code>。</li><li>②RR：在A的<code>右孩子的右子树</code>中插入导致A的不平衡，将A的<code>右孩子左上旋</code>。</li><li>③LR：在A的<code>左孩子的右子树</code>中插入导致A的不平衡，将A的<code>左孩子的右孩子，先左上旋再右上旋</code>。</li><li>④RL：在A的<code>右孩子的左子树</code>中插入导致A的不平衡，将A的<code>右孩子的左孩子，先右上旋再左上旋</code>。</li></ul><h2 id="_4-6-4-查找效率分析" tabindex="-1"><a class="header-anchor" href="#_4-6-4-查找效率分析" aria-hidden="true">#</a> 4.6.4 查找效率分析</h2>`,16),p=s("p",null,[s("code",null,"平均查找的时间复杂度"),a("="),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"l"),s("mi",null,"o"),s("mi",null,"g"),s("mtext",null," "),s("mn",null,"2"),s("mtext",null," "),s("mi",null,"h"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(log~2~h)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mspace nobreak"}," "),s("span",{class:"mord"},"2"),s("span",{class:"mspace nobreak"}," "),s("span",{class:"mord mathnormal"},"h"),s("span",{class:"mclose"},")")])])])],-1),o=s("h2",{id:"_4-6-5-高度为h的平衡二叉树的最少结点数",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_4-6-5-高度为h的平衡二叉树的最少结点数","aria-hidden":"true"},"#"),a(" 4.6.5 高度为h的平衡二叉树的最少结点数")],-1),r=s("p",null,[s("code",null,"递推公式"),a("："),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"n"),s("mi",null,"h")]),s("mo",null,"="),s("msub",null,[s("mi",null,"n"),s("mrow",null,[s("mi",null,"h"),s("mo",null,"−"),s("mn",null,"1")])]),s("mo",null,"+"),s("msub",null,[s("mi",null,"n"),s("mrow",null,[s("mi",null,"h"),s("mo",null,"−"),s("mn",null,"2")])]),s("mo",null,"+"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"n_h=n_{h-1}+n_{h-2}+1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3361em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"h")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7917em","vertical-align":"-0.2083em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3361em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"h"),s("span",{class:"mbin mtight"},"−"),s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2083em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7917em","vertical-align":"-0.2083em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3361em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"h"),s("span",{class:"mbin mtight"},"−"),s("span",{class:"mord mtight"},"2")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2083em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])])],-1),h=[m,p,o,r];function d(u,g){return l(),e("div",null,h)}const v=n(i,[["render",d],["__file","4.6平衡二叉树.html.vue"]]);export{v as default};
