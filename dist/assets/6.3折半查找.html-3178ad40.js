const n=JSON.parse(`{"key":"v-61c68978","path":"/computer-science/data-structure/06.%E6%9F%A5%E6%89%BE/6.3%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE.html","title":"6.3 折半查找","lang":"zh-CN","frontmatter":{"title":"6.3 折半查找","category":["计算机科学","数据结构"],"description":"6.3.1 折半查找的定义 折半查找，又叫二分查找。仅适用于有序的顺序表。 6.3.2 折半查找的实现 算法思想：每次从中间分，判断自己是哪一半 普通代码： //查找表的数据结构（动态分配的顺序表） typedef struct{ ElemType *elem; //指向“动态”分配的数组的指针 int TableLen; //查找表的当前长度 }SSTable; //折半查找 int Binary_Search(SSTable L, ElemType key){ int low =0, high = L.TableLen-1, mid; while(low &lt;= high){ mid = (low + high)/2; //取中间值 if(L.elem[mid] == key){ return mid; //查找成功，则返回所在位置 }else if(L.elem[mid] &gt; key){ high = mid - 1; //从前半部分继续查 }else{ low = mid + 1; //从后半部分继续查 } } return -1; //查找失败，返回-1 }","head":[["meta",{"property":"og:url","content":"https://github.com/xiangweizeng/computer-science/data-structure/06.%E6%9F%A5%E6%89%BE/6.3%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE.html"}],["meta",{"property":"og:site_name","content":"Damone's Blog"}],["meta",{"property":"og:title","content":"6.3 折半查找"}],["meta",{"property":"og:description","content":"6.3.1 折半查找的定义 折半查找，又叫二分查找。仅适用于有序的顺序表。 6.3.2 折半查找的实现 算法思想：每次从中间分，判断自己是哪一半 普通代码： //查找表的数据结构（动态分配的顺序表） typedef struct{ ElemType *elem; //指向“动态”分配的数组的指针 int TableLen; //查找表的当前长度 }SSTable; //折半查找 int Binary_Search(SSTable L, ElemType key){ int low =0, high = L.TableLen-1, mid; while(low &lt;= high){ mid = (low + high)/2; //取中间值 if(L.elem[mid] == key){ return mid; //查找成功，则返回所在位置 }else if(L.elem[mid] &gt; key){ high = mid - 1; //从前半部分继续查 }else{ low = mid + 1; //从后半部分继续查 } } return -1; //查找失败，返回-1 }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"damone"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"6.3 折半查找\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"damone\\",\\"url\\":\\"https://github.com/xiangweizeng\\"}]}"]]},"headers":[{"level":2,"title":"6.3.1 折半查找的定义","slug":"_6-3-1-折半查找的定义","link":"#_6-3-1-折半查找的定义","children":[]},{"level":2,"title":"6.3.2 折半查找的实现","slug":"_6-3-2-折半查找的实现","link":"#_6-3-2-折半查找的实现","children":[]},{"level":2,"title":"6.3.3 查找效率分析","slug":"_6-3-3-查找效率分析","link":"#_6-3-3-查找效率分析","children":[]},{"level":2,"title":"6.3.4 折半查找判定树的构造","slug":"_6-3-4-折半查找判定树的构造","link":"#_6-3-4-折半查找判定树的构造","children":[{"level":3,"title":"构造：","slug":"构造","link":"#构造","children":[]},{"level":3,"title":"特性：","slug":"特性","link":"#特性","children":[]}]}],"git":{},"readingTime":{"minutes":1.06,"words":317},"filePathRelative":"computer-science/data-structure/06.查找/6.3折半查找.md","excerpt":"<h2> 6.3.1 折半查找的定义</h2>\\n<p><code>折半查找</code>，又叫<code>二分查找</code>。仅适用于<code>有序的顺序表</code>。</p>\\n<h2> 6.3.2 折半查找的实现</h2>\\n<p><code>算法思想</code>：每次从中间分，判断自己是哪一半</p>\\n<p>普通代码：</p>\\n<div class=\\"language-c line-numbers-mode\\" data-ext=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token comment\\">//查找表的数据结构（动态分配的顺序表）</span>\\n<span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span><span class=\\"token punctuation\\">{</span>\\n    ElemType <span class=\\"token operator\\">*</span>elem<span class=\\"token punctuation\\">;</span>      <span class=\\"token comment\\">//指向“动态”分配的数组的指针</span>\\n    <span class=\\"token keyword\\">int</span> TableLen<span class=\\"token punctuation\\">;</span>        <span class=\\"token comment\\">//查找表的当前长度</span>\\n<span class=\\"token punctuation\\">}</span>SSTable<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//折半查找</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">Binary_Search</span><span class=\\"token punctuation\\">(</span>SSTable L<span class=\\"token punctuation\\">,</span> ElemType key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> low <span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> high <span class=\\"token operator\\">=</span> L<span class=\\"token punctuation\\">.</span>TableLen<span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> mid<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>low <span class=\\"token operator\\">&lt;=</span> high<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        mid <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>low <span class=\\"token operator\\">+</span> high<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">/</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>           <span class=\\"token comment\\">//取中间值</span>\\n        <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>L<span class=\\"token punctuation\\">.</span>elem<span class=\\"token punctuation\\">[</span>mid<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">==</span> key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">return</span> mid<span class=\\"token punctuation\\">;</span>                 <span class=\\"token comment\\">//查找成功，则返回所在位置</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>L<span class=\\"token punctuation\\">.</span>elem<span class=\\"token punctuation\\">[</span>mid<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&gt;</span> key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            high <span class=\\"token operator\\">=</span> mid <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>             <span class=\\"token comment\\">//从前半部分继续查</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token keyword\\">else</span><span class=\\"token punctuation\\">{</span>\\n            low <span class=\\"token operator\\">=</span> mid <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>              <span class=\\"token comment\\">//从后半部分继续查</span>\\n        <span class=\\"token punctuation\\">}</span>  \\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>                          <span class=\\"token comment\\">//查找失败，返回-1</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
