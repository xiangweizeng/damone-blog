export const data = JSON.parse("{\"key\":\"v-5f84de7b\",\"path\":\"/computer-science/data-structure/04.%E6%A0%91/4.2%E4%BA%8C%E5%8F%89%E6%A0%91.html\",\"title\":\"4.2 二叉树\",\"lang\":\"zh-CN\",\"frontmatter\":{\"description\":\"4.2 二叉树 4.2.1 二叉树的定义： 二叉树是n(n≥0)个结点的有限集合 ①或者为空二叉树，即n=0。 ②或者由一个根结点和两个互不相交的被称为根的左子树和右子树组成。左子树和右子树又分别是一棵二叉树 特点：①每个结点至多只有两棵子树 ②左右子树不能颠倒（二叉树是有序树） 二叉树示意图\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://github.com/xiangweizeng/damone-blog/computer-science/data-structure/04.%E6%A0%91/4.2%E4%BA%8C%E5%8F%89%E6%A0%91.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Damone's Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"4.2 二叉树\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"4.2 二叉树 4.2.1 二叉树的定义： 二叉树是n(n≥0)个结点的有限集合 ①或者为空二叉树，即n=0。 ②或者由一个根结点和两个互不相交的被称为根的左子树和右子树组成。左子树和右子树又分别是一棵二叉树 特点：①每个结点至多只有两棵子树 ②左右子树不能颠倒（二叉树是有序树） 二叉树示意图\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"damone\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"4.2 二叉树\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"damone\\\",\\\"url\\\":\\\"https://github.com/xiangweizeng\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"4.2.1 二叉树的定义：\",\"slug\":\"_4-2-1-二叉树的定义\",\"link\":\"#_4-2-1-二叉树的定义\",\"children\":[]},{\"level\":2,\"title\":\"4.2.2 二叉树的五种状态\",\"slug\":\"_4-2-2-二叉树的五种状态\",\"link\":\"#_4-2-2-二叉树的五种状态\",\"children\":[]},{\"level\":2,\"title\":\"4.2.3 特殊的二叉树\",\"slug\":\"_4-2-3-特殊的二叉树\",\"link\":\"#_4-2-3-特殊的二叉树\",\"children\":[]},{\"level\":2,\"title\":\"4.2.4 二叉树的性质\",\"slug\":\"_4-2-4-二叉树的性质\",\"link\":\"#_4-2-4-二叉树的性质\",\"children\":[]},{\"level\":2,\"title\":\"4.2.5 存储结构\",\"slug\":\"_4-2-5-存储结构\",\"link\":\"#_4-2-5-存储结构\",\"children\":[]},{\"level\":2,\"title\":\"4.2.6 二叉树的顺序存储\",\"slug\":\"_4-2-6-二叉树的顺序存储\",\"link\":\"#_4-2-6-二叉树的顺序存储\",\"children\":[{\"level\":3,\"title\":\"二叉树的类型描述\",\"slug\":\"二叉树的类型描述\",\"link\":\"#二叉树的类型描述\",\"children\":[]},{\"level\":3,\"title\":\"初始化\",\"slug\":\"初始化\",\"link\":\"#初始化\",\"children\":[]}]},{\"level\":2,\"title\":\"4.2.7 二叉树的链式存储（二叉链表）\",\"slug\":\"_4-2-7-二叉树的链式存储-二叉链表\",\"link\":\"#_4-2-7-二叉树的链式存储-二叉链表\",\"children\":[{\"level\":4,\"title\":\"二叉树的类型表述\",\"slug\":\"二叉树的类型表述\",\"link\":\"#二叉树的类型表述\",\"children\":[]},{\"level\":3,\"title\":\"初始化（部分代码）\",\"slug\":\"初始化-部分代码\",\"link\":\"#初始化-部分代码\",\"children\":[]},{\"level\":3,\"title\":\"找结点p的父节点很难，解决：\",\"slug\":\"找结点p的父节点很难-解决\",\"link\":\"#找结点p的父节点很难-解决\",\"children\":[]}]},{\"level\":2,\"title\":\"4.2.8 二叉树的遍历\",\"slug\":\"_4-2-8-二叉树的遍历\",\"link\":\"#_4-2-8-二叉树的遍历\",\"children\":[{\"level\":3,\"title\":\"代码：（用二叉树的链式存储）\",\"slug\":\"代码-用二叉树的链式存储\",\"link\":\"#代码-用二叉树的链式存储\",\"children\":[]},{\"level\":3,\"title\":\"应用：\",\"slug\":\"应用\",\"link\":\"#应用\",\"children\":[]}]},{\"level\":2,\"title\":\"4.2.9 二叉树的层次遍历（层序遍历）\",\"slug\":\"_4-2-9-二叉树的层次遍历-层序遍历\",\"link\":\"#_4-2-9-二叉树的层次遍历-层序遍历\",\"children\":[{\"level\":3,\"title\":\"链队列\",\"slug\":\"链队列\",\"link\":\"#链队列\",\"children\":[]},{\"level\":3,\"title\":\"代码：（用二叉树的链式存储）\",\"slug\":\"代码-用二叉树的链式存储-1\",\"link\":\"#代码-用二叉树的链式存储-1\",\"children\":[]}]},{\"level\":2,\"title\":\"4.2.10 由遍历序列构造二叉树\",\"slug\":\"_4-2-10-由遍历序列构造二叉树\",\"link\":\"#_4-2-10-由遍历序列构造二叉树\",\"children\":[]}],\"readingTime\":{\"minutes\":5.72,\"words\":1716},\"filePathRelative\":\"computer-science/data-structure/04.树/4.2二叉树.md\",\"excerpt\":\"<h1> 4.2 二叉树</h1>\\n<h2> 4.2.1 二叉树的定义：</h2>\\n<p><code>二叉树</code>是n(n≥0)个结点的有限集合\\n①或者为空二叉树，即n=0。\\n②或者由一个根结点和两个互不相交的被称为根的左子树和右子树组成。左子树和右子树又分别是一棵二叉树\\n特点：①每个结点至多只有两棵子树 ②左右子树不能颠倒（二叉树是有序树）</p>\\n<figure><img src=\\\"/images/datastruct/2-1Q226195I0M1.gif\\\" alt=\\\"二叉树示意图\\\" tabindex=\\\"0\\\" loading=\\\"lazy\\\"><figcaption>二叉树示意图</figcaption></figure>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
