import{_ as a}from"./1637934445539-81fcff4e.js";import{_ as t,N as e,S as p,U as s,a0 as n,Z as l}from"./framework-b23b3642.js";const c="/images/datastruct/uTools_1638194953695.png",i="/images/datastruct/1638194223550.jpg",o="/images/datastruct/1638194223556.png",u={},r=s("h1",{id:"_5-8-拓扑排序",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_5-8-拓扑排序","aria-hidden":"true"},"#"),n(" 5.8 拓扑排序")],-1),m=s("h2",{id:"_5-8-1-aov网",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_5-8-1-aov网","aria-hidden":"true"},"#"),n(" 5.8.1 AOV网")],-1),d=s("p",null,[s("code",null,"AOV网"),n("（Activity On Vertex NetWork，用"),s("code",null,"顶点表示活动"),n("的网）： 用DAG图（"),s("code",null,"有向无环图"),n("）表示一个工程。 "),s("code",null,"顶点表示活动"),n("，边"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"<"),s("msub",null,[s("mi",null,"V"),s("mi",null,"i")]),s("mo",{separator:"true"},","),s("msub",null,[s("mi",null,"V"),s("mi",null,"j")]),s("mo",null,">")]),s("annotation",{encoding:"application/x-tex"},"<V_i,V_j>")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5782em","vertical-align":"-0.0391em"}}),s("span",{class:"mrel"},"<"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.9694em","vertical-align":"-0.2861em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.22222em"}},"V"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.2222em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.22222em"}},"V"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.2222em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05724em"}},"j")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2861em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},">")])])]),n("表示活动"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"V"),s("mi",null,"i")])]),s("annotation",{encoding:"application/x-tex"},"V_i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.22222em"}},"V"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.2222em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),n("必须先于活动"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"V"),s("mi",null,"j")])]),s("annotation",{encoding:"application/x-tex"},"V_j")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.9694em","vertical-align":"-0.2861em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.22222em"}},"V"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.2222em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05724em"}},"j")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2861em"}},[s("span")])])])])])])])]),n("进行")],-1),k=l('<figure><img src="'+c+'" alt="uTools_1638194953695" tabindex="0" loading="lazy"><figcaption>uTools_1638194953695</figcaption></figure><h2 id="_5-8-2-拓扑排序" tabindex="-1"><a class="header-anchor" href="#_5-8-2-拓扑排序" aria-hidden="true">#</a> 5.8.2 拓扑排序</h2><p>有向无环图中当且仅当满足下列条件时，称为该图的一个拓扑排序：</p><ul><li>①每个顶点出现且只出现一次</li><li>②若顶点A在序列中排在B的前面，则在图中不存在从B到A的路径</li></ul><p>每个AOV网有多个拓扑排序序列。</p><p><code>拓扑排序：找到做事的先后顺序。</code></p><p>拓扑排序的实现：</p><ul><li>①从AOV网中选择一个没有前驱（入度为0）的顶点并输出。</li><li>②从网中删除该顶点和所有以它为起点的有向边。</li><li>③重复①和②直到当前的AOV网为空或当前网中不存在无前驱的顶点为止。</li></ul><h3 id="图的类型描述" tabindex="-1"><a class="header-anchor" href="#图的类型描述" aria-hidden="true">#</a> 图的类型描述：</h3><figure><img src="'+a+`" alt="1637934445539" tabindex="0" loading="lazy"><figcaption>1637934445539</figcaption></figure><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxVertexNum</span> <span class="token expression"><span class="token number">100</span>       </span><span class="token comment">//顶点数目最大值</span></span>
<span class="token comment">//&quot;边（弧）&quot;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ArcNode</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> adjvex<span class="token punctuation">;</span>                <span class="token comment">//边（弧）指向那个结点</span>
    <span class="token keyword">struct</span> <span class="token class-name">ArcNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>      <span class="token comment">//指向下一条弧的指针</span>
    <span class="token comment">//InfoType info;           //边权值</span>
<span class="token punctuation">}</span>ArcNode<span class="token punctuation">;</span>
<span class="token comment">//&quot;顶点&quot;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">VNode</span><span class="token punctuation">{</span>
    VertexType data<span class="token punctuation">;</span>           <span class="token comment">//顶点数据</span>
    ArcNode <span class="token operator">*</span>first<span class="token punctuation">;</span>            <span class="token comment">//顶点指向的第一条边</span>
<span class="token punctuation">}</span>VNode<span class="token punctuation">,</span> AdjList<span class="token punctuation">[</span>MaxVertexNum<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//用领接表存储图</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>
    AdjList vertices<span class="token punctuation">;</span>          <span class="token comment">//顶点数组</span>
    <span class="token keyword">int</span> vernum<span class="token punctuation">,</span> arcnum<span class="token punctuation">;</span>        <span class="token comment">////图当前的顶点数和边数（弧数）</span>
<span class="token punctuation">}</span>ALGraph<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>bool <span class="token function">TopologicalSort</span><span class="token punctuation">(</span>Graph G<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">InitStack</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//初始化栈，存储入度为0的顶点</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>indegree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">Push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//将所有入度为0的顶点进栈</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span>；          <span class="token comment">//计数，记录当前已经输出的顶点数</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">//栈不空，则存在入度为0的顶点</span>
        <span class="token function">Pop</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//栈顶元素出栈</span>
        print<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token comment">//输出顶点i</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>p<span class="token operator">=</span>G<span class="token punctuation">.</span>vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span> p<span class="token punctuation">;</span> p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>nextarc<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//p是顶点第一个指向的结点，p存在则循环</span>
            <span class="token comment">//将所有i指向的顶点的入度减1，并且将入度减为0的顶点压入栈s</span>
            v <span class="token operator">=</span> p<span class="token operator">-&gt;</span>adjvex<span class="token punctuation">;</span>     <span class="token comment">//v是结点p中存的顶点号</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">--</span>indegree<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//入度先减1，再判断是否为0</span>
                <span class="token function">Push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//入度为0，则入栈</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>vexnum<span class="token punctuation">)</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token comment">//排序失败，有向图中有回路</span>
    <span class="token keyword">else</span>
        <span class="token keyword">return</span> true<span class="token punctuation">;</span>     <span class="token comment">//拓扑排序成功</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+i+'" alt="1638194223550" tabindex="0" loading="lazy"><figcaption>1638194223550</figcaption></figure><figure><img src="'+o+'" alt="1638194223556" tabindex="0" loading="lazy"><figcaption>1638194223556</figcaption></figure>',15),v=[r,m,d,k];function h(g,b){return e(),p("div",null,v)}const _=t(u,[["render",h],["__file","5.8拓扑排序.html.vue"]]);export{_ as default};
