import{_ as n,N as s,S as a,Z as e}from"./framework-72158890.js";const t={},p=e(`<h1 id="_3-2-串的存储结构" tabindex="-1"><a class="header-anchor" href="#_3-2-串的存储结构" aria-hidden="true">#</a> 3.2 串的存储结构</h1><h2 id="_3-2-1-串的存储结构" tabindex="-1"><a class="header-anchor" href="#_3-2-1-串的存储结构" aria-hidden="true">#</a> 3.2.1 串的存储结构</h2><p><code>顺序存储</code>和<code>链式存储</code></p><h2 id="_3-2-2-串的顺序存储的实现方式" tabindex="-1"><a class="header-anchor" href="#_3-2-2-串的顺序存储的实现方式" aria-hidden="true">#</a> 3.2.2 串的顺序存储的实现方式</h2><p>实现方式：<code>静态分配</code>和<code>动态分配</code>，一般用动态分配</p><h3 id="串的类型描述" tabindex="-1"><a class="header-anchor" href="#串的类型描述" aria-hidden="true">#</a> 串的类型描述：</h3><h4 id="静态分配-sstring" tabindex="-1"><a class="header-anchor" href="#静态分配-sstring" aria-hidden="true">#</a> 静态分配：SString</h4><div class="language-C line-numbers-mode" data-ext="C"><pre class="language-C"><code>#define MAXLEN 255;			 //定义最大长度
typedef struct{
    char ch[MAXLEN];         //“静态”的数组存数据，存字符
    int length;              //串的实际长度
}SString;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="动态分配-hstring" tabindex="-1"><a class="header-anchor" href="#动态分配-hstring" aria-hidden="true">#</a> 动态分配：HString</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>ch<span class="token punctuation">;</span>                <span class="token comment">//指向“动态”分配的串的基地址</span>
    <span class="token keyword">int</span> length<span class="token punctuation">;</span>              <span class="token comment">//顺序表的当前长度</span>
<span class="token punctuation">}</span>HString<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="静态分配的顺序存储的串的优缺点" tabindex="-1"><a class="header-anchor" href="#静态分配的顺序存储的串的优缺点" aria-hidden="true">#</a> 静态分配的顺序存储的串的优缺点</h3><p><code>缺点</code>：串的顺序存储的表长确定后无法修改，存满了就存不了了</p><h3 id="动态分配的顺序表的优缺点" tabindex="-1"><a class="header-anchor" href="#动态分配的顺序表的优缺点" aria-hidden="true">#</a> 动态分配的顺序表的优缺点：</h3><p><code>优点</code>：可以动态增加长度</p><p><code>缺点</code>：动态增加长度中的迁移工作时间开销大</p><h2 id="_3-2-3-串的链式存储的实现方式" tabindex="-1"><a class="header-anchor" href="#_3-2-3-串的链式存储的实现方式" aria-hidden="true">#</a> 3.2.3 串的链式存储的实现方式</h2><p>实现方式：<code>不带头结点</code>和<code>带头结点</code>，一般用带头结点</p><p><code>不带头结点</code>和<code>带头结点</code>的类型描述相同，初始化和判空不同</p><h3 id="串的类型描述-1" tabindex="-1"><a class="header-anchor" href="#串的类型描述-1" aria-hidden="true">#</a> 串的类型描述：</h3><p>分为：<code>单个分配</code>和<code>堆分配</code>，一般用堆分配</p><p>单个分配存储密度低，堆分配存储密度高</p><h4 id="单个分配" tabindex="-1"><a class="header-anchor" href="#单个分配" aria-hidden="true">#</a> 单个分配：</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">StringNode</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>                  <span class="token comment">//每个结点存1个字符</span>
    <span class="token keyword">struct</span> <span class="token class-name">StringNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>StringNode<span class="token punctuation">,</span> <span class="token operator">*</span>String<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="堆分配" tabindex="-1"><a class="header-anchor" href="#堆分配" aria-hidden="true">#</a> 堆分配：</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">StringNode</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token comment">//每个结点存4个字符</span>
    <span class="token keyword">struct</span> <span class="token class-name">StringNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>StringNode<span class="token punctuation">,</span> <span class="token operator">*</span>String<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-2-4-串的上的操作" tabindex="-1"><a class="header-anchor" href="#_3-2-4-串的上的操作" aria-hidden="true">#</a> 3.2.4 串的上的操作</h2><p>以静态分配的顺序串为主</p><h3 id="求子串" tabindex="-1"><a class="header-anchor" href="#求子串" aria-hidden="true">#</a> 求子串</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//求子串</span>
bool <span class="token function">SubString</span><span class="token punctuation">(</span>SString <span class="token operator">&amp;</span>Sub<span class="token punctuation">,</span> SString S<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//子串范围越界</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">+</span>len<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&gt;</span>S<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>pos<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>pos<span class="token operator">+</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        Sub<span class="token punctuation">.</span>ch<span class="token punctuation">[</span>i<span class="token operator">-</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span>S<span class="token punctuation">.</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    Sub<span class="token punctuation">.</span>length <span class="token operator">=</span> len<span class="token punctuation">;</span>
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串比较" tabindex="-1"><a class="header-anchor" href="#字符串比较" aria-hidden="true">#</a> 字符串比较</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//字符串比较操作。若S&gt;T,则返回值&gt;0;若S=T,则返回值=0;若S&lt;T,则返回值&lt;0。</span>
<span class="token keyword">int</span> <span class="token function">StrCompare</span><span class="token punctuation">(</span>SString S<span class="token punctuation">,</span> SString T<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>S<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> T<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>T<span class="token punctuation">.</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> S<span class="token punctuation">.</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//扫描过所有字符都相等，则长度更长的串更大</span>
    <span class="token keyword">return</span> S<span class="token punctuation">.</span>length<span class="token operator">-</span>T<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="定位操作" tabindex="-1"><a class="header-anchor" href="#定位操作" aria-hidden="true">#</a> 定位操作</h3><p>方法：在S中依次按顺序取m长子串，判断是否与T相同</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//定位操作</span>
<span class="token keyword">int</span> <span class="token function">Index</span><span class="token punctuation">(</span>SString S<span class="token punctuation">,</span>SString T<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token function">StrLength</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token function">StrLength</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
    SString sub<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token operator">-</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">SubString</span><span class="token punctuation">(</span>sub<span class="token punctuation">,</span> S<span class="token punctuation">,</span> i<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">StrCompare</span><span class="token punctuation">(</span>sub<span class="token punctuation">,</span> T<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">++</span>i<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span> <span class="token comment">//返回子串在主串中的位置</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment">//S中不存在与T相同的子串</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,34),c=[p];function o(i,l){return s(),a("div",null,c)}const r=n(t,[["render",o],["__file","3.2串的存储结构.html.vue"]]);export{r as default};
