import{_ as n}from"./94cad1c8a786c9179df9bed6c93d70cf3ac75763-98796448.js";import{_ as s,N as a,S as e,Z as t}from"./framework-72158890.js";const p="/damone-blog/images/datastruct/2-1Q226195I0M1.gif",c="/damone-blog/images/datastruct/4b0e73acff4a4190996c148ddc66e08d.jpeg",o="/damone-blog/images/datastruct/2-1Q226195949495.gif",i="/damone-blog/images/datastruct/2-1Q22620003J18.gif",l="/damone-blog/images/datastruct/2022-09000938303.jfif",u="/damone-blog/images/datastruct/v2-55f42c78e51c0de9d1b942278ee1cfc1_720w.jpg",d="/damone-blog/images/datastruct/v2-e9eb296238feba1867dc2b7b6deec257_720w.jpg",r={},k=t('<h1 id="_4-2-二叉树" tabindex="-1"><a class="header-anchor" href="#_4-2-二叉树" aria-hidden="true">#</a> 4.2 二叉树</h1><h2 id="_4-2-1-二叉树的定义" tabindex="-1"><a class="header-anchor" href="#_4-2-1-二叉树的定义" aria-hidden="true">#</a> 4.2.1 二叉树的定义：</h2><p><code>二叉树</code>是n(n≥0)个结点的有限集合 ①或者为空二叉树，即n=0。 ②或者由一个根结点和两个互不相交的被称为根的左子树和右子树组成。左子树和右子树又分别是一棵二叉树 特点：①每个结点至多只有两棵子树 ②左右子树不能颠倒（二叉树是有序树）</p><figure><img src="'+p+'" alt="二叉树示意图" tabindex="0" loading="lazy"><figcaption>二叉树示意图</figcaption></figure><h2 id="_4-2-2-二叉树的五种状态" tabindex="-1"><a class="header-anchor" href="#_4-2-2-二叉树的五种状态" aria-hidden="true">#</a> 4.2.2 二叉树的五种状态</h2><figure><img src="'+c+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_4-2-3-特殊的二叉树" tabindex="-1"><a class="header-anchor" href="#_4-2-3-特殊的二叉树" aria-hidden="true">#</a> 4.2.3 特殊的二叉树</h2><p><code>满二叉树</code>：一个二叉树，如果每一个层的结点数都达到最大值，则这个二叉树就是满二叉树。也就是说，如果一个二叉树的层数为K，且结点总数是(2^k) -1 ，则它就是满二叉树。</p><p><code>特点</code>： ①只有最后一层有叶子结点 ②不存在度为1的结点 ③按层序从1开始编号，结点i的左孩子为2i，右孩子为2+1；结点i的父节点为i/2向下取整（如果有的话）</p><figure><img src="'+o+'" alt="满二叉树示意图" tabindex="0" loading="lazy"><figcaption>满二叉树示意图</figcaption></figure><p><code>完全二叉树</code>：当且仅当每个结点都与相同高度的满二叉树的编号一一对应</p><p>特点： ①只有最后两层可能有叶子结点 ②最多只有一个度为1的结点 ③按层序从1开始编号，结点i的左孩子为2i，右孩子为2+1；结点i的父节点为i/2向下取整（如果有的话） ④i ≤ n/2向下取整为分支结点，i ≥ n/2向下取整为叶子结点</p><figure><img src="'+i+'" alt="完全二叉树示意图" tabindex="0" loading="lazy"><figcaption>完全二叉树示意图</figcaption></figure><p><code>二叉排序树</code>：一棵二叉树或者是空二叉树，或者是具有如下性质的二叉树：左子树上所有结点的关键字均小于根结点的关键字；右子树上的所有结点的关键字均大于根结点的关键字。</p><figure><img src="'+n+'" alt="二叉排序树" tabindex="0" loading="lazy"><figcaption>二叉排序树</figcaption></figure><p><code>平衡二叉树</code>：树上任一结点的左子树和右子树的深度之差不超过1。</p><figure><img src="'+l+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_4-2-4-二叉树的性质" tabindex="-1"><a class="header-anchor" href="#_4-2-4-二叉树的性质" aria-hidden="true">#</a> 4.2.4 二叉树的性质</h2><p>几个重要常考的基本操作：</p><ul><li><p>i的左孩子——2i</p></li><li><p>i的右孩子——2i+1</p></li><li><p>i的父节点——i/2向下取整</p></li><li><p>i所在的层次 ——log2(n+1)向上取整 或 log2n向下取整+1</p></li></ul><p>若<code>完全二叉树</code>中共有n个结点（非完全二叉树不行），则</p><ul><li>判断i是否有左孩子？——2i≤n则有</li><li>·判断是否有右孩子？——2i+1&lt;n则有</li><li>判断i是否是叶子/分支结点？——i&gt;n/2向下取整是叶子结点，i&lt;n/2向下取整是分支结点</li></ul><h2 id="_4-2-5-存储结构" tabindex="-1"><a class="header-anchor" href="#_4-2-5-存储结构" aria-hidden="true">#</a> 4.2.5 存储结构</h2><p><code>顺序存储</code>和<code>链式存储</code>，一般用链式存储</p><h2 id="_4-2-6-二叉树的顺序存储" tabindex="-1"><a class="header-anchor" href="#_4-2-6-二叉树的顺序存储" aria-hidden="true">#</a> 4.2.6 二叉树的顺序存储</h2><p>只适合存完全二叉树，普通二叉树会浪费很多空间</p><h3 id="二叉树的类型描述" tabindex="-1"><a class="header-anchor" href="#二叉树的类型描述" aria-hidden="true">#</a> 二叉树的类型描述</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token number">10</span></span></span>
<span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token punctuation">{</span>
	Elemtype value<span class="token punctuation">;</span>    <span class="token comment">//结点中的数据元素</span>
	bool isEmpty<span class="token punctuation">;</span>      <span class="token comment">//结点是否为空</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

TreeNode t<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化" aria-hidden="true">#</a> 初始化</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//初始化</span>
bool <span class="token function">initBTree</span><span class="token punctuation">(</span>TreeNode <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>MaxSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isEmpty <span class="token operator">=</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-2-7-二叉树的链式存储-二叉链表" tabindex="-1"><a class="header-anchor" href="#_4-2-7-二叉树的链式存储-二叉链表" aria-hidden="true">#</a> 4.2.7 二叉树的链式存储（二叉链表）</h2><h4 id="二叉树的类型表述" tabindex="-1"><a class="header-anchor" href="#二叉树的类型表述" aria-hidden="true">#</a> 二叉树的类型表述</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token punctuation">{</span>
	Elemtype data<span class="token punctuation">;</span>                   <span class="token comment">//数据域</span>
	<span class="token keyword">struct</span> <span class="token class-name">BiTNode</span> <span class="token operator">*</span>lchide<span class="token punctuation">,</span> <span class="token operator">*</span>rchild<span class="token punctuation">;</span> <span class="token comment">//左、右孩子指针</span>
<span class="token punctuation">}</span>BiTNode<span class="token punctuation">,</span> <span class="token operator">*</span>BiTree<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>注</code>：n个结点的二叉链表共有n+1个空链域</p><p>因为n个结点，有n-1个有指向；2n个指针，则指向NULL的个数=2n-(n-1)=n+1</p><h3 id="初始化-部分代码" tabindex="-1"><a class="header-anchor" href="#初始化-部分代码" aria-hidden="true">#</a> 初始化（部分代码）</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//数据域</span>
<span class="token keyword">struct</span> <span class="token class-name">Elemtype</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//定义一颗空树</span>
BiTree root <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

<span class="token comment">//插入根结点</span>
root <span class="token operator">=</span> <span class="token punctuation">(</span>BiTree<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BiTNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token operator">-&gt;</span>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
root<span class="token operator">-&gt;</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
root<span class="token operator">-&gt;</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

<span class="token comment">//插入新结点</span>
BiTNode <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>BiTNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BiTNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
root<span class="token operator">-&gt;</span>lchild <span class="token operator">=</span> p<span class="token punctuation">;</span>   <span class="token comment">//作为根结点的左孩子</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="找结点p的父节点很难-解决" tabindex="-1"><a class="header-anchor" href="#找结点p的父节点很难-解决" aria-hidden="true">#</a> 找结点p的父节点很难，解决：</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token punctuation">{</span>
	Elemtype data<span class="token punctuation">;</span>                   <span class="token comment">//数据域</span>
	<span class="token keyword">struct</span> <span class="token class-name">BiTNode</span> <span class="token operator">*</span>lchide<span class="token punctuation">,</span> <span class="token operator">*</span>rchild<span class="token punctuation">;</span> <span class="token comment">//左、右孩子指针</span>
    <span class="token keyword">struct</span> <span class="token class-name">BiTNode</span> <span class="token operator">*</span>parent<span class="token punctuation">;</span>          <span class="token comment">//父节点指针</span>
<span class="token punctuation">}</span>BiTNode<span class="token punctuation">,</span> <span class="token operator">*</span>BiTree<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-2-8-二叉树的遍历" tabindex="-1"><a class="header-anchor" href="#_4-2-8-二叉树的遍历" aria-hidden="true">#</a> 4.2.8 二叉树的遍历</h2><p>先序遍历、中序遍历、后序遍历</p><p><code>先序遍历</code>：根左右（NLR）</p><p><code>中序遍历</code>：左根右（LNR）</p><p><code>后序遍历</code>：左右根（LRN）</p><h3 id="代码-用二叉树的链式存储" tabindex="-1"><a class="header-anchor" href="#代码-用二叉树的链式存储" aria-hidden="true">#</a> 代码：（用二叉树的链式存储）</h3><figure><img src="`+u+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>先序遍历：每个结点都会被路过3次，第一次路过时访问结点</p><p><code>空间复杂度</code>=O(h)</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//先序遍历</span>
<span class="token keyword">void</span> <span class="token function">PreOrder</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">visit</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//访问根结点</span>
        <span class="token function">PreOrder</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//递归遍历左子树</span>
        <span class="token function">PreOrder</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//递归遍历右子树</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>中序遍历：每个结点都会被路过3次，第二次路过时访问结点</p><p><code>空间复杂度</code>=O(h)</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//中序遍历</span>
<span class="token keyword">void</span> <span class="token function">InOrder</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">InOrder</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//递归遍历左子树</span>
        <span class="token function">visit</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//访问根结点</span>
        <span class="token function">InOrder</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//递归遍历右子树</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后序遍历：每个结点都会被路过3次，第三次路过时访问结点</p><p><code>空间复杂度</code>=O(h)</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//后序遍历</span>
<span class="token keyword">void</span> <span class="token function">PostOrder</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">PostOrder</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//递归遍历左子树</span>
        <span class="token function">PostOrder</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//递归遍历右子树</span>
        <span class="token function">visit</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//访问根结点</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="应用" tabindex="-1"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用：</h3><p>1.算数表达式的<code>分析树</code></p><p><code>先序遍历</code>-&gt;前缀表达式</p><p><code>中序遍历</code>-&gt;中缀表达式（需要加界限符）</p><p><code>后序遍历</code>-&gt;后缀表达式</p><p>2.求树的深度</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//求树的深度</span>
<span class="token keyword">void</span> <span class="token function">treeDepth</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token function">treeDepth</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//左子树高度</span>
        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">treeDepth</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//右子树高度</span>
        <span class="token comment">//树的深度=Max（左子树深度，右子树深度）+1</span>
        <span class="token keyword">return</span> l<span class="token operator">&gt;</span>r <span class="token operator">?</span> l<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">:</span> r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-2-9-二叉树的层次遍历-层序遍历" tabindex="-1"><a class="header-anchor" href="#_4-2-9-二叉树的层次遍历-层序遍历" aria-hidden="true">#</a> 4.2.9 二叉树的层次遍历（层序遍历）</h2><figure><img src="`+d+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>算法思想： ①初始化一个辅助队列（链队列） ②根结点入队 ③若队列非空，则队头结点出队，访问该结点并将其左、右孩子插入队尾(如果有的话) ④重复③直至队列为空</p><h3 id="链队列" tabindex="-1"><a class="header-anchor" href="#链队列" aria-hidden="true">#</a> 链队列</h3><div class="language-C line-numbers-mode" data-ext="C"><pre class="language-C"><code>//类型描述
typedef struct LNode{    //定义单链表结点类型
	ElemType data;            //数据域，可以是别的各种数据类型，本文统一用int类型
	struct LNode *next;  //指针域
}LNode;
typedef struct{
    LNode *front, *rear;
}LinkQueue;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码-用二叉树的链式存储-1" tabindex="-1"><a class="header-anchor" href="#代码-用二叉树的链式存储-1" aria-hidden="true">#</a> 代码：（用二叉树的链式存储）</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//层次遍历</span>
<span class="token keyword">void</span> <span class="token function">LevelOrder</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">{</span>
    LinkQueue Q<span class="token punctuation">;</span>
    <span class="token function">InitQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    BiTree p<span class="token punctuation">;</span>    <span class="token comment">//T为根结点，p也是根结点，保证根出队后可以指向孩子，因为T出队后，T-&gt;lchild无效</span>
    <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span> T<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//根结点入队</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//队列不空则循环</span>
        <span class="token function">DeQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span> T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//根结点出队</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>lchild<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
            <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//左结点入队</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>rchild<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
            <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//右结点入队</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-2-10-由遍历序列构造二叉树" tabindex="-1"><a class="header-anchor" href="#_4-2-10-由遍历序列构造二叉树" aria-hidden="true">#</a> 4.2.10 由遍历序列构造二叉树</h2><p>1.前序+中序遍历序列</p><p>2.后序+中序遍历序列</p><p>3.层序+中序遍历序列</p><p>关键是有非中序确定根结点是谁，再将根结点代入中序得左右子树，依次类推。</p>`,74),m=[k];function v(b,h){return a(),e("div",null,m)}const _=s(r,[["render",v],["__file","4.2二叉树.html.vue"]]);export{_ as default};
