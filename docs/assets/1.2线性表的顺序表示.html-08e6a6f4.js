const e=JSON.parse(`{"key":"v-37db839a","path":"/computer-science/data-structure/01.%E7%BA%BF%E6%80%A7%E8%A1%A8/1.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA.html","title":"1.2 线性表的顺序表示","lang":"zh-CN","frontmatter":{"title":"1.2 线性表的顺序表示","category":["计算机科学","数据结构"],"description":"1.2.1 顺序表的定义 顺序表：线性表的顺序存储，它是用一组地址连续的存储单元依次存储线性表中的数据元素，使得逻辑上相邻的两个元素在物理位置上也相邻。 1.2.2 顺序表的特点 ①随机访问：可直接通过下标访问 ②存储密度高：每个节点只能存数据元素 ③拓展容量不方便：即便采用动态分配方式，迁移数据时时间复杂度也比较高 ④插入、删除操作不方便：需要移动大量元素 1.2.3 顺序表的实现方式","head":[["meta",{"property":"og:url","content":"https://github.com/xiangweizeng/damone-blog/computer-science/data-structure/01.%E7%BA%BF%E6%80%A7%E8%A1%A8/1.2%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA.html"}],["meta",{"property":"og:site_name","content":"Damone's Blog"}],["meta",{"property":"og:title","content":"1.2 线性表的顺序表示"}],["meta",{"property":"og:description","content":"1.2.1 顺序表的定义 顺序表：线性表的顺序存储，它是用一组地址连续的存储单元依次存储线性表中的数据元素，使得逻辑上相邻的两个元素在物理位置上也相邻。 1.2.2 顺序表的特点 ①随机访问：可直接通过下标访问 ②存储密度高：每个节点只能存数据元素 ③拓展容量不方便：即便采用动态分配方式，迁移数据时时间复杂度也比较高 ④插入、删除操作不方便：需要移动大量元素 1.2.3 顺序表的实现方式"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"damone"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1.2 线性表的顺序表示\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"damone\\",\\"url\\":\\"https://github.com/xiangweizeng\\"}]}"]]},"headers":[{"level":3,"title":"1.2.1 顺序表的定义","slug":"_1-2-1-顺序表的定义","link":"#_1-2-1-顺序表的定义","children":[]},{"level":3,"title":"1.2.2 顺序表的特点","slug":"_1-2-2-顺序表的特点","link":"#_1-2-2-顺序表的特点","children":[]},{"level":3,"title":"1.2.3 顺序表的实现方式","slug":"_1-2-3-顺序表的实现方式","link":"#_1-2-3-顺序表的实现方式","children":[]},{"level":3,"title":"1.2.4 静态分配的顺序表上的操作","slug":"_1-2-4-静态分配的顺序表上的操作","link":"#_1-2-4-静态分配的顺序表上的操作","children":[{"level":4,"title":"静态分配的顺序表的优缺点","slug":"静态分配的顺序表的优缺点","link":"#静态分配的顺序表的优缺点","children":[]},{"level":4,"title":"顺序表的类型描述","slug":"顺序表的类型描述","link":"#顺序表的类型描述","children":[]},{"level":4,"title":"初始化","slug":"初始化","link":"#初始化","children":[]},{"level":4,"title":"插入","slug":"插入","link":"#插入","children":[]},{"level":4,"title":"删除","slug":"删除","link":"#删除","children":[]},{"level":4,"title":"查找","slug":"查找","link":"#查找","children":[]},{"level":4,"title":"无销毁","slug":"无销毁","link":"#无销毁","children":[]}]},{"level":3,"title":"1.2.5 动态分配的顺序表上的操作","slug":"_1-2-5-动态分配的顺序表上的操作","link":"#_1-2-5-动态分配的顺序表上的操作","children":[{"level":4,"title":"动态分配的顺序表的优缺点：","slug":"动态分配的顺序表的优缺点","link":"#动态分配的顺序表的优缺点","children":[]},{"level":4,"title":"顺序表的类型描述","slug":"顺序表的类型描述-1","link":"#顺序表的类型描述-1","children":[]},{"level":4,"title":"初始化","slug":"初始化-1","link":"#初始化-1","children":[]},{"level":4,"title":"动态增加数组长度","slug":"动态增加数组长度","link":"#动态增加数组长度","children":[]},{"level":4,"title":"插入","slug":"插入-1","link":"#插入-1","children":[]},{"level":4,"title":"删除(与静态一样)","slug":"删除-与静态一样","link":"#删除-与静态一样","children":[]},{"level":4,"title":"查找(与静态一样)","slug":"查找-与静态一样","link":"#查找-与静态一样","children":[]},{"level":4,"title":"销毁","slug":"销毁","link":"#销毁","children":[]}]},{"level":3,"title":"1.2.6 共同的操作","slug":"_1-2-6-共同的操作","link":"#_1-2-6-共同的操作","children":[{"level":4,"title":"求表长","slug":"求表长","link":"#求表长","children":[]},{"level":4,"title":"遍历","slug":"遍历","link":"#遍历","children":[]},{"level":4,"title":"判空","slug":"判空","link":"#判空","children":[]}]},{"level":3,"title":"1.2.7 完整代码","slug":"_1-2-7-完整代码","link":"#_1-2-7-完整代码","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":7.95,"words":2384},"filePathRelative":"computer-science/data-structure/01.线性表/1.2线性表的顺序表示.md","excerpt":"<h3> 1.2.1 顺序表的定义</h3>\\n<p><code>顺序表</code>：线性表的<code>顺序存储</code>，它是用一组地址连续的存储单元依次存储线性表中的数据元素，使得<strong>逻辑上相邻的两个元素在物理位置上也相邻</strong>。</p>\\n<h3> 1.2.2 顺序表的特点</h3>\\n<p>①随机访问：可直接通过下标访问</p>\\n<p>②存储密度高：每个节点只能存数据元素</p>\\n<p>③拓展容量不方便：即便采用动态分配方式，迁移数据时时间复杂度也比较高</p>\\n<p>④插入、删除操作不方便：需要移动大量元素</p>\\n<h3> 1.2.3 顺序表的实现方式</h3>","autoDesc":true}`);export{e as data};
