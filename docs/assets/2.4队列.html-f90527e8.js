import{_ as n,N as a,S as s,Z as e}from"./framework-72158890.js";const t="/damone-blog/images/datastruct/1-140G31P93Y96.jpg",c={},p=e('<h1 id="_2-4-队列" tabindex="-1"><a class="header-anchor" href="#_2-4-队列" aria-hidden="true">#</a> 2.4 队列</h1><h2 id="_2-4-1-队列的定义" tabindex="-1"><a class="header-anchor" href="#_2-4-1-队列的定义" aria-hidden="true">#</a> 2.4.1 队列的定义</h2><p><code>队列</code>是只允许在一端进行插入，在另一端进行删除的线性表（<code>先进先出</code>，<code>后进后出</code>）</p><figure><img src="'+t+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_2-4-2-队列的基本操作" tabindex="-1"><a class="header-anchor" href="#_2-4-2-队列的基本操作" aria-hidden="true">#</a> 2.4.2 队列的基本操作</h2><p><code>注</code>：参数代“&amp;”表示：方法运行完后，对参数修改的结果要<code>“带回来”</code></p><p>对数据的操作：创销，增删查改</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">InitQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//初始化队列：构造一个空队列Q，分配内存空间</span>
<span class="token function">DestoryQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//销毁操作：销毁队列，并释放队列Q所占用的内存空间</span>

<span class="token function">EnQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//入队，若队列Q未满，则将x加入使之成为新的队尾</span>
<span class="token function">DeQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//出队，若队列Q非空，则删除队头元素，并用x返回</span>

<span class="token function">GetHead</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//读队头元素，若队列Q非空，则将x返回队头元素</span>

<span class="token comment">//其它常用操作</span>
<span class="token function">QueueEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//判空操作</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-4-3-存储结构" tabindex="-1"><a class="header-anchor" href="#_2-4-3-存储结构" aria-hidden="true">#</a> 2.4.3 存储结构</h2><p><code>顺序存储</code>和<code>链式存储</code></p><h2 id="_2-4-4-队列分类" tabindex="-1"><a class="header-anchor" href="#_2-4-4-队列分类" aria-hidden="true">#</a> 2.4.4 队列分类</h2><p>队列的顺序存储：顺序队列</p><p>队列的链式存储：链式队列</p>`,13),o=[p];function i(u,l){return a(),s("div",null,o)}const r=n(c,[["render",i],["__file","2.4队列.html.vue"]]);export{r as default};
