import{_ as n,N as s,S as a,Z as e}from"./framework-72158890.js";const t="/damone-blog/images/datastruct/2021041814455792.jpg",p={},o=e('<h3 id="_1-5-1-循环链表的定义" tabindex="-1"><a class="header-anchor" href="#_1-5-1-循环链表的定义" aria-hidden="true">#</a> 1.5.1 循环链表的定义</h3><p><code>循环链表</code>：一般包括循环循环链表和循环循环链表，如下图所示</p><figure><img src="'+t+`" alt="循环链表" tabindex="0" loading="lazy"><figcaption>循环链表</figcaption></figure><h3 id="_1-5-2-循环链表的实现方式" tabindex="-1"><a class="header-anchor" href="#_1-5-2-循环链表的实现方式" aria-hidden="true">#</a> 1.5.2 循环链表的实现方式</h3><p>实现方式：<code>不带头结点</code>和<code>带头结点</code>，一般带头结点比不带头结点好</p><p>带头结点：写操作代码方便，一般用带头结点，不明确的都是带头结点的</p><p>不带头结点：写操作代码麻烦，要区分第一个数据和后续数据的处理</p><h3 id="_1-5-3-循环单链表上的操作-带头结点" tabindex="-1"><a class="header-anchor" href="#_1-5-3-循环单链表上的操作-带头结点" aria-hidden="true">#</a> 1.5.3 循环单链表上的操作（带头结点）</h3><h4 id="循环单链表的类型描述-与单链表一样" tabindex="-1"><a class="header-anchor" href="#循环单链表的类型描述-与单链表一样" aria-hidden="true">#</a> 循环单链表的类型描述(与单链表一样)</h4><div class="language-C line-numbers-mode" data-ext="C"><pre class="language-C"><code>typedef struct LNode{    //定义循环链表结点类型
	int data;            //数据域，可以是别的各种数据类型，本文统一用int类型
	struct LNode *next;  //指针域
}LNode, *LinkList;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="初始化和判空-与单链表不一样" tabindex="-1"><a class="header-anchor" href="#初始化和判空-与单链表不一样" aria-hidden="true">#</a> 初始化和判空(与单链表不一样)</h4><p>L-&gt;next = NULL改为L-&gt;next = L</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//初始化</span>
<span class="token keyword">void</span> <span class="token function">InitList</span><span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    L <span class="token operator">=</span> <span class="token punctuation">(</span>LNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    L<span class="token operator">-&gt;</span>next <span class="token operator">=</span> L<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//判空操作</span>
bool <span class="token function">Empty</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-&gt;</span>next <span class="token operator">==</span> L<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="判断表尾结点" tabindex="-1"><a class="header-anchor" href="#判断表尾结点" aria-hidden="true">#</a> 判断表尾结点</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//判断结点p是否是表尾结点</span>
bool <span class="token function">isTail</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>next <span class="token operator">==</span> L<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="插入、删除" tabindex="-1"><a class="header-anchor" href="#插入、删除" aria-hidden="true">#</a> 插入、删除</h4><p>循环单链表的插入、删除算法与单链表几乎一样，不同的是如果在表尾进行，那么要让单链表继续<strong>保持循环的性质</strong>，即<strong>让尾结点的next域指向头结点</strong>。</p><p><code>时间复杂度</code>=O(1)</p><h4 id="查找" tabindex="-1"><a class="header-anchor" href="#查找" aria-hidden="true">#</a> 查找</h4><p>单链表的查找是从表头开始，找到表尾停止。而循环单链表中，若从表头开始查找，那与单链表的操作一致。若从表的任意位置开始查找，那么需要一个计数变量sum，当sum=表长时还未找到，则查找失败，退出循环。</p><h4 id="求表长" tabindex="-1"><a class="header-anchor" href="#求表长" aria-hidden="true">#</a> 求表长</h4><p>与单链表一样</p><h4 id="遍历" tabindex="-1"><a class="header-anchor" href="#遍历" aria-hidden="true">#</a> 遍历</h4><p>单链表只能从表头结点开始往后顺序遍历整个链表，循环单链表可以从表中的<code>任意一个结点开始</code>遍历整个链表。</p><h3 id="_1-5-4-循环双链表上的操作-带头结点" tabindex="-1"><a class="header-anchor" href="#_1-5-4-循环双链表上的操作-带头结点" aria-hidden="true">#</a> 1.5.4 循环双链表上的操作（带头结点）</h3><h4 id="循环链表的类型描述" tabindex="-1"><a class="header-anchor" href="#循环链表的类型描述" aria-hidden="true">#</a> 循环链表的类型描述</h4><div class="language-C line-numbers-mode" data-ext="C"><pre class="language-C"><code>typedef struct DNode{
    int data;  //数据域
    struct DNode *prior,*next;  //前驱和后继指针
}DNode, *DLinkList;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="初始化和判空" tabindex="-1"><a class="header-anchor" href="#初始化和判空" aria-hidden="true">#</a> 初始化和判空</h4><p>L-&gt;next = NULL改为L-&gt;next = L</p><p>L-&gt;prior = NULL改为L-&gt;prior = L</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//初始化</span>
bool <span class="token function">InitList</span><span class="token punctuation">(</span>DLinkList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    L <span class="token operator">=</span> <span class="token punctuation">(</span>LNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DLinkList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>L <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    L<span class="token operator">-&gt;</span>prior <span class="token operator">=</span> L<span class="token punctuation">;</span>
    L<span class="token operator">-&gt;</span>next <span class="token operator">=</span> L<span class="token punctuation">;</span>
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//判空操作</span>
bool <span class="token function">Empty</span><span class="token punctuation">(</span>DLinkList L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-&gt;</span>next <span class="token operator">==</span> L<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="判断表尾结点-1" tabindex="-1"><a class="header-anchor" href="#判断表尾结点-1" aria-hidden="true">#</a> 判断表尾结点</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//判断结点p是否是表尾结点</span>
bool <span class="token function">isTail</span><span class="token punctuation">(</span>DLinkList L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-&gt;</span>next <span class="token operator">==</span> L<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="插入" tabindex="-1"><a class="header-anchor" href="#插入" aria-hidden="true">#</a> 插入</h4><p>循环双链表的插入、删除算法与双链表几乎一样，不同的是如果在表尾进行，那么要让双链表继续<strong>保持循环的性质</strong>，即<strong>让尾结点的next域指向头结点，同时让头结点的prior域指向尾结点</strong>。</p><p><code>注</code>：p-&gt;next-&gt;prior = s; 循环时不判断</p><p><code>时间复杂度</code>=O(1)</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//将x插入到循环链表L中*p结点的下一个结点</span>
bool <span class="token function">Insert</span><span class="token punctuation">(</span>DNode <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
    DNode <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token punctuation">(</span>DNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token operator">||</span>s<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    s<span class="token operator">-&gt;</span>data <span class="token operator">=</span> x<span class="token punctuation">;</span>
    s<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>  <span class="token comment">//1</span>
    p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>prior <span class="token operator">=</span> s<span class="token punctuation">;</span> <span class="token comment">//2</span>
    s<span class="token operator">-&gt;</span>prior <span class="token operator">=</span> p<span class="token punctuation">;</span>  <span class="token comment">//3</span>
    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> s<span class="token punctuation">;</span> <span class="token comment">//4</span>
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//在循环链表L中*p结点后插入s结点</span>
bool <span class="token function">Insert</span><span class="token punctuation">(</span>DNode <span class="token operator">*</span>p<span class="token punctuation">,</span> DNode <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>
    s<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>  <span class="token comment">//1</span>
    p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>prior <span class="token operator">=</span> s<span class="token punctuation">;</span> <span class="token comment">//2</span>
    s<span class="token operator">-&gt;</span>prior <span class="token operator">=</span> p<span class="token punctuation">;</span>  <span class="token comment">//3</span>
    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> s<span class="token punctuation">;</span> <span class="token comment">//4</span>
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除" tabindex="-1"><a class="header-anchor" href="#删除" aria-hidden="true">#</a> 删除</h4><p><code>注</code>：p-&gt;next-&gt;prior = s; 循环时不判断</p><h5 id="按位序删除" tabindex="-1"><a class="header-anchor" href="#按位序删除" aria-hidden="true">#</a> 按位序删除</h5><p><code>时间复杂度</code>=O(n)</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//删除操作:将循环链表中的第i个结点删除</span>
bool <span class="token function">Delete</span><span class="token punctuation">(</span>DLinkList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">&gt;</span><span class="token function">Length</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    DNode <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">GetElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    DNode <span class="token operator">*</span>q <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> q<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> <span class="token comment">//1</span>
    q<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>prior <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment">//2</span>
    <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="指定结点的删除" tabindex="-1"><a class="header-anchor" href="#指定结点的删除" aria-hidden="true">#</a> 指定结点的删除</h5><p><code>时间复杂度</code>=O(1)</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//删除操作:删除循环链表中的p结点的后继结点</span>
<span class="token keyword">void</span> <span class="token function">DeleteNextNode</span><span class="token punctuation">(</span>DNode <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>
    DNode <span class="token operator">*</span>q <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> q<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> <span class="token comment">//1</span>
    q<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>prior <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment">//2</span>
    <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="查找-与单双链表完全一样" tabindex="-1"><a class="header-anchor" href="#查找-与单双链表完全一样" aria-hidden="true">#</a> 查找(与单双链表完全一样)</h4><h5 id="按位查找" tabindex="-1"><a class="header-anchor" href="#按位查找" aria-hidden="true">#</a> 按位查找</h5><p><code>平均时间复杂度</code>=O(n)</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//按位查找：查找在循环链表L中第i个位置的结点</span>
DNode <span class="token operator">*</span><span class="token function">GetElem</span><span class="token punctuation">(</span>DLinkList L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    DNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        j<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span> <span class="token comment">//如果i大于表长，p=NULL,直接返回p即可</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="按值查找" tabindex="-1"><a class="header-anchor" href="#按值查找" aria-hidden="true">#</a> 按值查找</h5><p><code>平均时间复杂度</code>=O(n)</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//按值查找：查找e在L中的位置</span>
DNode <span class="token operator">*</span><span class="token function">LocateElem</span><span class="token punctuation">(</span>DLinkList L<span class="token punctuation">,</span> <span class="token keyword">int</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    DNode <span class="token operator">*</span>p <span class="token operator">=</span> L<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> p<span class="token operator">-&gt;</span>data <span class="token operator">!=</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="求表长、遍历、销毁" tabindex="-1"><a class="header-anchor" href="#求表长、遍历、销毁" aria-hidden="true">#</a> 求表长、遍历、销毁</h4><p>与单双链表一样</p>`,57),c=[o];function i(l,r){return s(),a("div",null,c)}const d=n(p,[["render",i],["__file","1.5循环链表.html.vue"]]);export{d as default};
